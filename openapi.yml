
openapi: "3.0.0"

info:
  title: "Generic FSE Code Challenge Datastore REST API"
  version: "1.0.0"
  description: "Basic endpoints for a generic FSE Code Challenge"

tags:
- name: "Customer"
  description: "Customer data endpoint"
- name: "Policy"
  description: "Policy data endpoint"
- name: "Provider"
  description: "Insurance provider basic info"
- name: "Insurance Type"
  description: "Insurance type data endpoint"
- name: "Policy Status"
  description: "Policy Status data endpoint"

paths:
  /api/v1/customer:
    get:
      tags: 
      - "Customer"
      summary: "Get all customers"
      description: "Get all customers in the database"
      parameters: []
      responses:
        200: 
          description: 200 Success
        400: 
          description: 400 Bad request
    patch:
        tags:
        - "Customer"
        summary: "Patch a customer record"
        description: "Patch selected fields in a customer record. Example: {id: valid_customer_id, firstName: new_first_name_value}"
        parameters: []
        requestBody: 
          required: true
          description: "Send payload with fieldName / fieldValue to patch. 'id' is required; this is the customer id. Other vals: firstName, lastName"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: Int64
                  fieldName:
                    type: String
              example:
                id: 1
                firstName: "test firstName"
        responses:
          200: 
            description: 200 Success
          400: 
            description: 400 Bad request
  /api/v1/customer/{id}:
      get:
        tags: 
          - "Customer"
        summary: "Get a customer by id"
        description: "Get a customer by customer id"
        parameters:
          - name: id
            in: path
            required: true
            description: Id of customer to retrieve.
            schema:
              type : integer
              format: int64
              minimum: 1
        responses:
          200: 
            description: 200 Success
          400: 
            description: 400 Bad request
  /api/v1/policy:
      get:
        tags: 
        - "Policy"
        summary: "Get all policy records"
        description: "Get all policy records"
        parameters: []
        responses:
          200: 
            description: 200 Success
          400: 
            description: 400 Bad request
      patch:
        tags:
        - "Policy"
        summary: "Patch a policy record"
        description: "Patch selected fields in a policy record. Example: {id: valid_policy_id, policyNumber: new_policy_number_value}"
        parameters: []
        requestBody: 
          required: true
          description: "Send payload with fieldName / fieldValue to patch. 'id' is required; this is the policy id. Other vals: policyNumber"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: Int64
                  fieldName:
                    type: String
              example:
                id: 1
                policyNumber: "test policy number"
        responses:
          200: 
            description: 200 Success
          400: 
            description: 400 Bad request

  /api/v1/policy/{id}:
      get:
        tags: 
          - "Policy"
        summary: "Get a policy by id"
        description: "Get a policy by policy id"
        parameters:
          - name: id
            in: path
            required: true
            description: Id of policy to retrieve.
            schema:
              type : integer
              format: int64
              minimum: 1
        responses:
          200: 
            description: 200 Success
          400: 
            description: 400 Bad request
  /api/v1/provider:
      get:
        tags: 
        - "Provider"
        summary: "Get all provider records"
        description: "Get all provider records"
        parameters: []
        responses:
          200: 
            description: 200 Success
          400: 
            description: 400 Bad request
  /api/v1/provider/{id}:
      get:
        tags: 
          - "Provider"
        summary: "Get a provider by id"
        description: "Get a provider by policy id"
        parameters:
          - name: id
            in: path
            required: true
            description: Id of provider to retrieve.
            schema:
              type : integer
              format: int64
              minimum: 1
        responses:
          200: 
            description: 200 Success
          400: 
            description: 400 Bad request
  /api/v1/insurance-type:
      get:
        tags: 
        - "Insurance Type"
        summary: "Get insurance types"
        description: "Get a list of available insurance types"
        parameters: []
        responses:
          200: 
            description: 200 Success
          400: 
            description: 400 Bad request
  /api/v1/insurance-type/{id}:
      get:
        tags: 
        - "Insurance Type"
        summary: "Get insurance type by id"
        description: "Get an insurance type by id"
        parameters:
          - name: id
            in: path
            required: true
            description: Id of insurance type to retrieve.
            schema:
              type : integer
              format: int64
              minimum: 1
        responses:
          200: 
            description: 200 Success
          400: 
            description: 400 Bad request
  /api/v1/policy-status:
      get:
        tags: 
        - "Policy Status"
        summary: "Get policy statuses"
        description: "Get all policy statuses in the database"
        parameters: []
        responses:
          200: 
            description: 200 Success
          400: 
            description: 400 Bad request
  /api/v1/policy-status/{id}:
      get:
        tags: 
        - "Policy Status"
        summary: "Get policy status"
        description: "Get a policy status by id"
        parameters:
          - name: id
            in: path
            required: true
            description: Id of policy status to retrieve.
            schema:
              type : integer
              format: int64
              minimum: 1
        responses:
          200: 
            description: 200 Success
          400: 
            description: 400 Bad request